'A function that prints the key for the smallest value in dictionary SubAtomPart.

SubAtomPart = {'neutron':0.55, 'proton': 0.21, 'meson': 0.03, 'muon': 0.07, 'neutrino': 0.14}

def count_values(dict):
    perobs = (min(dict.values()))
    for key, value in dict.iteritems():
        if value == perobs:
            print key

print count_values(SubAtomPart)

'A function that prints the number of values that appear two or more times.

ky = []
vl = []
Rept = set()
NRept = set()

def count_values(dict):
    for key, value in dict.iteritems():
        ky.append(key)
        vl.append(value)
    for v in vl:
        if vl.count(v) > 1:
            Rept.add(v)
        else:
            NRept.add(v)
    print len(Rept)

' Uses a supplied key and if available replaces the associated value with a supplied new_value

def fetch_and_set(dict, key, new_value):
    if key in dict:
        dict.get(key, 'Present')
        dict[key] = new_value
        print dict
    else:
        return 'Unable to replace value for nonexistent key'

' Temp takes a dictionary and returns "balanced" if list totals 1.00

ky = []
vl = []
total = 0
def balanced_color(dict):
    for key, value in dict.iteritems():
        ky.append(key)
        vl.append(value)
    total = sum(vl)
    if total == 1.00:
        return "balanced"
    else:
        return 'not balanced'

' Takes two dictionaries (dict1, dict2) and returns the key/value pair overlap between dict1 and dict2

temp1 = {}
def dict_intersect(dict1, dict2):
    for key1, value1 in dict1.iteritems():
        for key2, value2 in dict2.iteritems():
            if key1 == key2 and value1 == value2:
                temp1[key1] = value1
    return temp1

' ***********************Work in progress**********************************************************************

Rates = {'12/25/2014': 1.50, '01/25/2015': 1.55, '02/25/2015': 1.60, '03/25/2015': 1.65, '12/25/2015': 1.75}

import datetime
import time

def rate_date(reqdate, dict):
    dates = []
    BootstrpInput = []
    RevDict = {}
    posreqdate = 0
    for key, value in dict.iteritems():
        TempDate = datetime.date(int(key[6:10]), int(key[0:2]), int(key[3:5]))
        TempDateNum = str([time.mktime(TempDate.timetuple())])
        RevDict[TempDateNum] = value
        dates.append(TempDateNum)
    ConvReqDate = datetime.date(int(reqdate[6:10]), int(reqdate[0:2]), int(reqdate[3:5]))
    DateNum = str([time.mktime(ConvReqDate.timetuple())])
    dates.append(DateNum)
    dates.sort()
    for i in [i for i, x in enumerate(dates) if x == DateNum]:
        posreqdate = i
    lower = dates[posreqdate - 1]
    upper = dates[posreqdate + 1]
    InvertDates = {value: key for key, value in Rates.iteritems()}
    BootstrpInput = [InvertDates[RevDict[lower]], RevDict[lower], InvertDates[RevDict[upper]], RevDict[upper]]
    return BootstrpInput

print rate_date('03/25/2015', Rates)

' bootstraping rate

RateBookEnds = ['03/25/2015', 1.65, '12/25/2015', 1.75]

import datetime
import time

def DiscRate(RateBookEnds, TargetDateStr):
    today = datetime.date.today()

    #Slicing the input table into component parts and assigning to a variable

    LowDateStr = RateBookEnds[0]
    LowRate = RateBookEnds[1]
    HighDateStr = RateBookEnds[2]
    HighRate = RateBookEnds[3]

    #Converting the strings into a datetime format

    LowDate = datetime.date(int(LowDateStr[6:10]), int(LowDateStr[0:2]), int(LowDateStr[3:5]))
    HighDate = datetime.date(int(HighDateStr[6:10]), int(HighDateStr[0:2]), int(HighDateStr[3:5]))
    TargetDate = datetime.date(int(TargetDateStr[6:10]), int(TargetDateStr[0:2]), int(TargetDateStr[3:5]))
    IncDist = abs((TargetDate - LowDate).days)
    if IncDist == 0:
        IncDist == 1

    #Calulating the DiscountRate from the BootStrapRate and the YearDecimal

    BootStrapRate = LowRate + (((HighRate - LowRate)/(abs((HighDate - LowDate).days)-1)) * IncDist)
    YearDecimal = abs((TargetDate - today).days)/365.25
    DiscountRate = ((1 + BootStrapRate / 200) ** 2) ** (YearDecimal * -1)

    #Returning the DiscountRate for the respective TargetDateStr

    return DiscountRate


print DiscRate(RateBookEnds, '12/15/2015')